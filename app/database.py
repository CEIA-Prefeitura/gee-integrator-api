"""
Inicializa o engine ass√≠ncrono e o sessionmaker padr√£o do projeto.
Utiliza settings (Dynaconf) + vari√°veis de ambiente como fallback.
"""

from __future__ import annotations

import os
from contextlib import asynccontextmanager
from typing import AsyncGenerator

from sqlalchemy.ext.asyncio import (
    AsyncEngine,
    AsyncSession,
    async_sessionmaker,
    create_async_engine,
)
from sqlalchemy.orm import declarative_base
from app.config import env

# ---------------------------------------
# üîß Montagem da URL de conex√£o
# ---------------------------------------
def _get_database_url() -> str:
    """
    Prioridade:
    1. Vari√°vel de ambiente POSTGRES_URL
    2. Dynaconf settings.POSTGRES_URL
       (aceita 'postgresql+asyncpg://' ou 'postgres://' e converte)
    """
    url = os.getenv("POSTGRES_URL") or env.get("POSTGRES_URL")
    if not url:
        raise RuntimeError(
            "POSTGRES_URL n√£o definido em vari√°veis de ambiente nem em settings"
        )

    # garante driver asyncpg
    if url.startswith("postgres://"):
        url = url.replace("postgres://", "postgresql+asyncpg://", 1)
    elif url.startswith("postgresql://"):
        url = url.replace("postgresql://", "postgresql+asyncpg://", 1)

    return url


DATABASE_URL: str = _get_database_url()

# ---------------------------------------
# üîå Engine e sessionmaker ass√≠ncronos
# ---------------------------------------
engine: AsyncEngine = create_async_engine(
    DATABASE_URL,
    echo=False,           # ‚Üí True para debug SQL
    pool_pre_ping=True,   # evita erros de conex√µes ociosas
    future=True,
)

AsyncSessionLocal: async_sessionmaker[AsyncSession] = async_sessionmaker(
    engine,
    expire_on_commit=False,
)


# ---------------------------------------
# üì¶ Dependency de sess√£o para FastAPI
# ---------------------------------------
async def get_async_session() -> AsyncGenerator[AsyncSession, None]:
    async with AsyncSessionLocal() as session:
        yield session

# ---------------------------------------
# üó∫Ô∏è Declarative base
# ---------------------------------------
Base = declarative_base()

